#!/usr/bin/python

# This script reads Docker container creation events and regenerates the
# /etc/dnsmasq.conf file.

import os
import json
import logging
import stat
import sys
import docker
import time

docker_client = docker.Client(base_url='unix://var/run/docker.sock')

def gen_dnsmasq_conf():
    global docker_client

    # Just the running Rancher VM containers
    containers = filter(lambda c:
                            filter(lambda e: e == u'RANCHER_VM=true',
                                   c.get("Config").get("Env")) != [],
                        map(docker_client.inspect_container,
                            map(lambda c: c.get("Id"),
                                docker_client.containers())))

    if containers == []:
        sys.exit()

    gateway = None
    ip_prefix_len = None

    with open("/etc/dnsmasq.conf", "w") as conf_file:
        conf_file.write("user=root\n")

        for container in containers:
            hostname = container.get("Config").get("Hostname")
            ip = container.get("NetworkSettings").get("IPAddress")
            ip_prefix_len = container.get("NetworkSettings").get("IPPrefixLen")
            gateway = container.get("NetworkSettings").get("Gateway")
            mac = container.get("NetworkSettings").get("MacAddress")

            conf_file.write("dhcp-range=" + ip + "," + ip + "\n")
            conf_file.write("dhcp-host=" + mac + "," + hostname + "," + ip + "\n") 

        netmask = '.'.join([str((0xffffffff << (32 - ip_prefix_len) >> i) & 0xff)
                        for i in [24, 16, 8, 0]])

        dns_ips = []
        for line in file('/etc/resolv.conf', 'r'):
            columns = line.split()
            if len(columns) > 0 and columns[0] == 'nameserver':
                dns_ips.extend(columns[1:])

        nameservers = ",".join(dns_ips)

        conf_file.write("dhcp-option=option:router," + gateway + "\n")
        conf_file.write("dhcp-option=option:netmask," + netmask + "\n")
        conf_file.write("dhcp-option=option:dns-server," + nameservers + "\n")

    # We kill and restart dnsmasq. It's not sufficient to send HUP signal.
    # dnsmasq does not read the config file when it receives the HUP signal

    dnsmasq_pid_file = "/var/run/dnsmasq.pid"

    if os.path.exists(dnsmasq_pid_file):
        with open (dnsmasq_pid_file, "r") as pidfile:
            os.system("kill " + pidfile.read())
    os.system("dnsmasq")

events = docker_client.events()
while True:
    try:
        event = json.loads(events.next())
        if event.get("status") == "start":
            print event
            sys.stdout.flush()
            gen_dnsmasq_conf()
    except Exception as e:
        time.sleep(5)

